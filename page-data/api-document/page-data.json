{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/api-document/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://storyhub-minimal-tarex.redq.now.sh"}},"markdownRemark":{"id":"d714d754-7885-549b-a0c8-d5d65f6e97cc","excerpt":"Demo https://c1495616js.github.io/api-document Repo https://github.com/c1495616js/api-document About We want to know how healthy about the codes and how…","html":"<h2>Demo</h2>\n<p><a href=\"https://c1495616js.github.io/api-document\">https://c1495616js.github.io/api-document</a></p>\n<h2>Repo</h2>\n<p><a href=\"https://github.com/c1495616js/api-document\">https://github.com/c1495616js/api-document</a></p>\n<h2>About</h2>\n<p>We want to know how healthy about the codes and how database looks like.\nIf we can have some tool automatically generating these reports while pipeline.</p>\n<h2>Structure</h2>\n<p>The difficult part running in github action is <code class=\"language-text\">schemaspy</code>,</p>\n<ol>\n<li>We run <code class=\"language-text\">backend</code> first, using typeorm syncronize <code class=\"language-text\">entity</code> with database table.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build Database\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">-</span>compose <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>file docker<span class=\"token punctuation\">-</span>compose.yml up <span class=\"token punctuation\">-</span>d <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>build backend</code></pre></div>\n<ol>\n<li>Generating <code class=\"language-text\">jest coverage</code> and <code class=\"language-text\">typedoc</code> is compared easier as we don’t need any database.</li>\n<li>I found <code class=\"language-text\">schemaspy</code> in docker-compose won’t wait until <code class=\"language-text\">backend</code> syncronizing database, therefore\nwe have to run two time docker-compose, first time is for generating database and table, then second time is generating <code class=\"language-text\">schemaspy</code>.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate Schemaspy\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">-</span>compose <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>file docker<span class=\"token punctuation\">-</span>compose.yml up <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>build schemaspy</code></pre></div>\n<h2>Installing</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D npm-run-all</code></pre></div>\n<h2>.gitignore</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># documentation</span>\ndocumentation/jest\ndocumentation/typedocs\ndocumentation/schema\ndocumentation/sonar\n.scannerwork</code></pre></div>\n<h2>Typedoc</h2>\n<p><img src=\"https://i.imgur.com/03uvos3.png\" alt=\"typedoc\"></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D typedoc</code></pre></div>\n<p>in <code class=\"language-text\">package.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typedocOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"inputFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"modules\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"out\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./documentation/typedocs\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Schemaspy</h2>\n<p><img src=\"https://i.imgur.com/Xl7xaUH.png\" alt=\"schemaspy\"></p>\n<ul>\n<li>add <code class=\"language-text\">schemaspy.properties</code> to your root folder.</li>\n</ul>\n<h3>For Backend Api</h3>\n<p>Using <code class=\"language-text\">typeorm</code> here.</p>\n<p>The reason for having nest.js backend here is because I can use <code class=\"language-text\">syncronize</code> to create tables with <code class=\"language-text\">entity</code>, saving me some time to run migration during pipeline.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @nestjs/typeorm typeorm pg</code></pre></div>\n<ul>\n<li>add <code class=\"language-text\">ormconfig.js</code> in root folder of backend</li>\n</ul>\n<h3>Docker</h3>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">schemaspy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> schemaspy/schemaspy<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>UID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>$<span class=\"token punctuation\">{</span>GID<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> postgres\n    <span class=\"token punctuation\">-</span> backend\n  <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-configFile\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/config/schemaspy.properties\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ./backend/documentation/schema<span class=\"token punctuation\">:</span>/output <span class=\"token comment\">## where you want to output</span>\n    <span class=\"token punctuation\">-</span> ./backend/schemaspy.properties<span class=\"token punctuation\">:</span>/config/schemaspy.properties <span class=\"token comment\">## read schemaspy config</span>\n  <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> backend</code></pre></div>\n<h2>Jest Coverage</h2>\n<p><img src=\"https://i.imgur.com/RMPl2pT.png\" alt=\"jest\"></p>\n<p>in <code class=\"language-text\">package.json</code>,</p>\n<p>Setting this to documentation folder: <code class=\"language-text\">&quot;coverageDirectory&quot;: &quot;../documentation/jest&quot;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token string\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"moduleFileExtensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"ts\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"testRegex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".spec.ts$\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"transform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"^.+\\\\.(t|j)s$\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-jest\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"coverageDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../documentation/jest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"testEnvironment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>SonarQube</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D sonarqube-scanner</code></pre></div>","fields":{"slug":"/api-document/"},"frontmatter":{"title":"Api Document","date":"19 Oct, 2020","description":"Generating Code Report Automatically","tags":["document","typedoc","schemaspy","sonarqube","CI/CD"],"cover":{"publicURL":"/static/0c59fa0b45eb1a9d5da8d6a8dc515daf/preview.png","childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='325'%20height='325'%20viewBox='0%200%20325%20325'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2046v43h163l163%201H0v51h163l163%201H0v72h163l163%201H0v21h163l163%201H0v50h163l163%201H0v37h326V2H0v44m78-18v12c0%2010%200%2011%202%2011s2-1%202-4c0-4%200-4%203-4%208%200%2012-8%207-13-2-1-12-3-14-2m44%200l-1%203c0%202%200%203-2%203-6%200-9%204-9%2010%200%205%202%207%209%207h6V39c0-12-1-14-3-11m-60%202l-8%2021c0%202%204%200%206-3%202-4%208-4%2010%200%202%203%205%205%205%203%201-1-1-6-6-18-2-5-5-7-7-3m176%200l-1%203-1%202c-2%200-2%202-1%203%201%200%202%203%202%207l1%206h3c4%200%204%200%204-2l-2-1c-2%200-2-1-2-5s0-5%202-5l2-1-2-2c-1%200-2-1-2-3s-2-4-3-2m27%200l-1%203-1%202c-2%200-2%202-1%203%201%200%202%203%202%207l1%206h3c4%200%204%200%204-2l-2-1c-2%200-2-1-2-5s0-5%202-5l2-1-2-2c-1%200-2-1-2-3s-2-4-3-2m-135%206c-3%203-3%2010%200%2013%202%203%209%203%2011%200%208-8-2-20-11-13m18%200c-3%203-4%209-1%2013%202%203%2011%203%2011-1h-3c-4%200-6-2-6-6%200-3%201-3%204-3%205%200%206-2%204-4-3-2-6-1-9%201m13-1c-2%201-1%2014%200%2015l7%201h6v-8c0-7-1-8-2-8s-2%201-2%205c0%2011-6%2011-6%201%200-6-2-8-3-6m16%200v8c0%207%200%208%202%208s2-1%202-6c0-6%201-7%203-7s2%200%202%206%200%207%202%207%202-1%202-5c0-6%201-8%203-8s3%203%203%209c0%203%200%204%202%204s2-1%202-4c0-11-3-15-9-12h-14m29%200c-2%200-5%205-5%208%200%204%204%208%208%208s7-1%207-3l-4-1c-3%201-6%200-6-3l5-1c5%200%205-1%205-3%200-5-5-7-10-5m13%200v8c0%207%200%208%202%208s2-1%202-6c0-6%201-6%203-6s3%200%203%206c0%205%200%206%202%206%203%200%203-13%200-15-1-2-10-2-12-1m31%200c-4%202-2%204%202%203%206-1%206%202%200%204-5%201-6%203-5%207%201%202%201%202%207%202h6v-7c0-9-4-13-10-9m34%202c-6%206-3%2014%205%2014%206%200%208-2%208-8%201-8-7-12-13-6m15-2v8c0%207%200%208%202%208s2-1%202-5c0-6%201-8%204-8%202%200%203%203%203%208%200%204%200%205%202%205s2%200%202-7l-2-8c-1-1-12-2-13-1m-146%2077l-3%203-2-3c-1-2-2-2-9-2-5%200-8%200-7%201l2%201c2%200%202%201%202%206s0%206%202%206l1-6c0-6%200-6%203-6s7%205%207%209%202%203%203%200c0-2%201-5%203-7%203-5%201-6-2-2m49-2c-3%201-4%203-4%207%200%205%202%207%207%207%204%200%207-2%207-5l1-1%201%201c0%203%204%205%208%205%205-1%205-3%200-3-4%200-5-1-5-3%200-4%202-6%205-6%204%201%205-1%202-2-4-1-8%201-9%204-2%203-3%203-3%200%200-2-5-5-7-5l-3%201m-44%207c0%206%200%207%202%207l1-2c0-2%201-3%202-3%204%200%207-4%205-7-1-2-2-2-6-2h-4v7m24%200l1%207h4c6%200%209-2%209-7s-2-7-9-7h-5v7m-14%2073c0%206%200%207%202%207s2%200%202-3c-1-3%200-3%203-3s3%200%203%203c0%202%201%203%202%203l1-7-1-7c-1%200-2%201-2%203%200%203%200%203-3%203s-3%200-3-3c0-2%200-3-2-3s-2%201-2%207m28%200c0%206%200%207%202%207l1-4v-4l2%203%203%203%203-3%202-3v4c0%203%200%204%202%204l1-7c0-8-2-9-5-3-3%205-3%205-6%200-3-6-5-5-5%203m-23%2068c-5%205-2%2012%205%2012%204%200%206-1%207-4%202-5-1-10-7-10l-5%202m13%202l4%207c2%205%204%204%207-4l3-6v13h6l5-1-4-1c-2%200-3%200-3-2%200-1%201-2%203-2l2-1-2-1c-4%200-4-3%200-3l4-2-7-1h-7l-2%205-2%204-3-4-3-5c-2%200-2%200-1%204m27%203c0%206%200%207%202%207l1-2%201-3%203%203c2%203%206%203%208%200%201-2%206-2%207%201h4l-3-7c-4-9-6-8-10%204l-1%203-2-2c-2-2-2-2-1-3%203-4%200-8-5-8h-4v7m28-5c-2%202-3%207%200%2010%202%203%2010%203%2011%201%202-3%201-5-2-6-3%200-4%201-1%202%202%201%200%203-3%203-3-1-4-3-4-6%201-3%201-3%206-3s5-2-1-3c-3%200-4%200-6%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5260416666666667,"src":"/static/0c59fa0b45eb1a9d5da8d6a8dc515daf/be5fd/preview.png","srcSet":"/static/0c59fa0b45eb1a9d5da8d6a8dc515daf/12aff/preview.png 293w,\n/static/0c59fa0b45eb1a9d5da8d6a8dc515daf/be5fd/preview.png 387w","srcWebp":"/static/0c59fa0b45eb1a9d5da8d6a8dc515daf/86e18/preview.webp","srcSetWebp":"/static/0c59fa0b45eb1a9d5da8d6a8dc515daf/05ceb/preview.webp 293w,\n/static/0c59fa0b45eb1a9d5da8d6a8dc515daf/86e18/preview.webp 387w","sizes":"(max-width: 387px) 100vw, 387px"}}}}},"allMarkdownRemark":{"edges":[]}},"pageContext":{"slug":"/api-document/","previous":{"fields":{"slug":"/my-developer-life/"},"frontmatter":{"title":"我在加拿大 打工旅遊 成為全端工程師","tags":["working holiday"]}},"next":null,"tag":["document","typedoc","schemaspy","sonarqube","CI/CD"]}},"staticQueryHashes":["2620024091","63159454"]}